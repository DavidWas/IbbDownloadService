@using IbbDownloadService.NugetModule.Contracts.Commands
@using IbbDownloadService.NugetModule.Contracts.DTOs
@using IbbDownloadService.NugetModule.Contracts.Events
@using IbbDownloadService.NugetModule.Contracts.Queries
@using MediatR
@namespace IbbDownloadService.Components

<div class="container">
    <Table Rows="_pendingRows" Header="_header" Title="Pending" RowActions="@_actionFragments"></Table>
    <button type="button" class="primary" @onclick="() => IsPendingModalOpen = true">Add</button>
</div>

<Modal ModalId="AddPendingModal" ModalTitle="HinzufÃ¼gen" @bind-IsOpen="IsPendingModalOpen">
    <EditForm EditContext="_editContext">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" class="form-control" @bind-Value="_addPendingNuget.Name"/>
        </div>

        <div class="form-group">
            <label for="Version">Version</label>
            <InputText id="Version" class="form-control" @bind-Value="_addPendingNuget.Version"/>
        </div>

        <div class="form-group">
            <label for="Md5Hash">MD5 Hash</label>
            <InputText id="Md5Hash" class="form-control" @bind-Value="_addPendingNuget.Md5"/>
        </div>

        <div class="form-buttons">
            <button type="button" class="primary" @onclick="HandleSubmit">Submit</button>
            <button type="button" class="secondary" onclick="window.closeDialog('AddPendingModal');">Cancel</button>
        </div>
    </EditForm>
</Modal>

<Modal ModalId="VerifyConfirmationModal" ModalTitle="Wirklich verifizieren?" @bind-IsOpen="IsVerifyConfirmationModalOpen">
    <div class="form-buttons">
        <div>
            <p>@_verifyPendingNuget?.Name</p>
            <p>@_verifyPendingNuget?.Version</p>
        </div>
        <button type="button" class="primary" @onclick="VerifyNuget">Yes</button>
        <button type="button" class="secondary" @onclick="() => IsVerifyConfirmationModalOpen = false">No</button>
    </div>
</Modal>

@inject IMediator Mediator
@inject NugetUpdatedEvent NugetUpdatedEvent
@code {
    private readonly string[] _header = ["Id", "Name", "Added", "Version", "MD5", ""];
    private List<string[]> _pendingRows = new();
    private AddPendingNuget _addPendingNuget = new();
    private EditContext _editContext = null!;
    private List<RenderFragment<string[]>> _actionFragments = null!;
    private bool IsPendingModalOpen { get; set; }
    private bool IsVerifyConfirmationModalOpen { get; set; }
    private VerifyPendingNuget? _verifyPendingNuget;

    protected override async Task OnInitializedAsync()
    {
        await LoadPendingRows();
        _editContext = new EditContext(_addPendingNuget);
        _actionFragments = new List<RenderFragment<string[]>>
        {
            row => @<button type="button" class="rowButton" @onclick="(e) => OnVerifyClicked(row)">Verify</button>
        };
    }

    private async Task LoadPendingRows()
    {
        var result = await Mediator.Send(new GetPendingNugetsQuery());
        _pendingRows = result.Select(n => new[] { n.Id.ToString(), n.Name, n.CreatedAt.ToString("dd.MM.yyyy"), n.Version, n.Md5Hash }).ToList();
    }

    private async Task HandleSubmit()
    {
        if (_editContext?.Validate() ?? false)
        {
            var command = new AddPendingNugetCommand()
            {
                Name = _addPendingNuget.Name,
                Version = _addPendingNuget.Version,
                Md5 = _addPendingNuget.Md5
            };
            await Mediator.Send(command);
            await LoadPendingRows();
            IsPendingModalOpen = false;
        }
    }

    private void OnVerifyClicked(string[] row)
    {
        _verifyPendingNuget = new VerifyPendingNuget()
        {
            Id = Guid.Parse(row[0]),
            Name = row[1],
            Version = row[3],
        };
        IsVerifyConfirmationModalOpen = true;
    }

    private async Task VerifyNuget()
    {
        if (_verifyPendingNuget != null)
        {
            IsVerifyConfirmationModalOpen = false;
            await Mediator.Send(new VerifyPendingNugetCommand()
            {
                Id = _verifyPendingNuget.Id
            });
            await LoadPendingRows();
            NugetUpdatedEvent.Notify();
        }
        _verifyPendingNuget = null;
    }

}